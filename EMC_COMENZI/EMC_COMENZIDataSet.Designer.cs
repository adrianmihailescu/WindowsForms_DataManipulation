//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EMC_COMENZI {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EMC_COMENZIDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EMC_COMENZIDataSet : global::System.Data.DataSet {
        
        private CLIENTIDataTable tableCLIENTI;
        
        private PRODUSEDataTable tablePRODUSE;
        
        private COMENZI_DETALIUDataTable tableCOMENZI_DETALIU;
        
        private COMENZIDataTable tableCOMENZI;
        
        private global::System.Data.DataRelation relationFK_COMENZI_DETALIU_PRODUSE;
        
        private global::System.Data.DataRelation relationFK_COMENZI_CLIENTI;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EMC_COMENZIDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EMC_COMENZIDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CLIENTI"] != null)) {
                    base.Tables.Add(new CLIENTIDataTable(ds.Tables["CLIENTI"]));
                }
                if ((ds.Tables["PRODUSE"] != null)) {
                    base.Tables.Add(new PRODUSEDataTable(ds.Tables["PRODUSE"]));
                }
                if ((ds.Tables["COMENZI_DETALIU"] != null)) {
                    base.Tables.Add(new COMENZI_DETALIUDataTable(ds.Tables["COMENZI_DETALIU"]));
                }
                if ((ds.Tables["COMENZI"] != null)) {
                    base.Tables.Add(new COMENZIDataTable(ds.Tables["COMENZI"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CLIENTIDataTable CLIENTI {
            get {
                return this.tableCLIENTI;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PRODUSEDataTable PRODUSE {
            get {
                return this.tablePRODUSE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMENZI_DETALIUDataTable COMENZI_DETALIU {
            get {
                return this.tableCOMENZI_DETALIU;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMENZIDataTable COMENZI {
            get {
                return this.tableCOMENZI;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EMC_COMENZIDataSet cln = ((EMC_COMENZIDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CLIENTI"] != null)) {
                    base.Tables.Add(new CLIENTIDataTable(ds.Tables["CLIENTI"]));
                }
                if ((ds.Tables["PRODUSE"] != null)) {
                    base.Tables.Add(new PRODUSEDataTable(ds.Tables["PRODUSE"]));
                }
                if ((ds.Tables["COMENZI_DETALIU"] != null)) {
                    base.Tables.Add(new COMENZI_DETALIUDataTable(ds.Tables["COMENZI_DETALIU"]));
                }
                if ((ds.Tables["COMENZI"] != null)) {
                    base.Tables.Add(new COMENZIDataTable(ds.Tables["COMENZI"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCLIENTI = ((CLIENTIDataTable)(base.Tables["CLIENTI"]));
            if ((initTable == true)) {
                if ((this.tableCLIENTI != null)) {
                    this.tableCLIENTI.InitVars();
                }
            }
            this.tablePRODUSE = ((PRODUSEDataTable)(base.Tables["PRODUSE"]));
            if ((initTable == true)) {
                if ((this.tablePRODUSE != null)) {
                    this.tablePRODUSE.InitVars();
                }
            }
            this.tableCOMENZI_DETALIU = ((COMENZI_DETALIUDataTable)(base.Tables["COMENZI_DETALIU"]));
            if ((initTable == true)) {
                if ((this.tableCOMENZI_DETALIU != null)) {
                    this.tableCOMENZI_DETALIU.InitVars();
                }
            }
            this.tableCOMENZI = ((COMENZIDataTable)(base.Tables["COMENZI"]));
            if ((initTable == true)) {
                if ((this.tableCOMENZI != null)) {
                    this.tableCOMENZI.InitVars();
                }
            }
            this.relationFK_COMENZI_DETALIU_PRODUSE = this.Relations["FK_COMENZI_DETALIU_PRODUSE"];
            this.relationFK_COMENZI_CLIENTI = this.Relations["FK_COMENZI_CLIENTI"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EMC_COMENZIDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EMC_COMENZIDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCLIENTI = new CLIENTIDataTable();
            base.Tables.Add(this.tableCLIENTI);
            this.tablePRODUSE = new PRODUSEDataTable();
            base.Tables.Add(this.tablePRODUSE);
            this.tableCOMENZI_DETALIU = new COMENZI_DETALIUDataTable();
            base.Tables.Add(this.tableCOMENZI_DETALIU);
            this.tableCOMENZI = new COMENZIDataTable();
            base.Tables.Add(this.tableCOMENZI);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_COMENZI_DETALIU_COMENZI", new global::System.Data.DataColumn[] {
                        this.tableCOMENZI.ID_COMANDAColumn}, new global::System.Data.DataColumn[] {
                        this.tableCOMENZI_DETALIU.ID_COMANDAColumn});
            this.tableCOMENZI_DETALIU.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            this.relationFK_COMENZI_DETALIU_PRODUSE = new global::System.Data.DataRelation("FK_COMENZI_DETALIU_PRODUSE", new global::System.Data.DataColumn[] {
                        this.tablePRODUSE.ID_PRODUSColumn}, new global::System.Data.DataColumn[] {
                        this.tableCOMENZI_DETALIU.ID_PRODUSColumn}, false);
            this.Relations.Add(this.relationFK_COMENZI_DETALIU_PRODUSE);
            this.relationFK_COMENZI_CLIENTI = new global::System.Data.DataRelation("FK_COMENZI_CLIENTI", new global::System.Data.DataColumn[] {
                        this.tableCLIENTI.ID_CLIENTColumn}, new global::System.Data.DataColumn[] {
                        this.tableCOMENZI.ID_CLIENTColumn}, false);
            this.Relations.Add(this.relationFK_COMENZI_CLIENTI);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCLIENTI() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePRODUSE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMENZI_DETALIU() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMENZI() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EMC_COMENZIDataSet ds = new EMC_COMENZIDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CLIENTIRowChangeEventHandler(object sender, CLIENTIRowChangeEvent e);
        
        public delegate void PRODUSERowChangeEventHandler(object sender, PRODUSERowChangeEvent e);
        
        public delegate void COMENZI_DETALIURowChangeEventHandler(object sender, COMENZI_DETALIURowChangeEvent e);
        
        public delegate void COMENZIRowChangeEventHandler(object sender, COMENZIRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CLIENTIDataTable : global::System.Data.TypedTableBase<CLIENTIRow> {
            
            private global::System.Data.DataColumn columnID_CLIENT;
            
            private global::System.Data.DataColumn columnCOD_CLIENT;
            
            private global::System.Data.DataColumn columnNUME;
            
            private global::System.Data.DataColumn columnADRESA;
            
            private global::System.Data.DataColumn columnTELEFON;
            
            private global::System.Data.DataColumn columnFAX;
            
            private global::System.Data.DataColumn columnEMAIL;
            
            private global::System.Data.DataColumn columnFLAG_DEL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIDataTable() {
                this.TableName = "CLIENTI";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CLIENTIDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CLIENTIDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_CLIENTColumn {
                get {
                    return this.columnID_CLIENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_CLIENTColumn {
                get {
                    return this.columnCOD_CLIENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMEColumn {
                get {
                    return this.columnNUME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADRESAColumn {
                get {
                    return this.columnADRESA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TELEFONColumn {
                get {
                    return this.columnTELEFON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FAXColumn {
                get {
                    return this.columnFAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLAG_DELColumn {
                get {
                    return this.columnFLAG_DEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIRow this[int index] {
                get {
                    return ((CLIENTIRow)(this.Rows[index]));
                }
            }
            
            public event CLIENTIRowChangeEventHandler CLIENTIRowChanging;
            
            public event CLIENTIRowChangeEventHandler CLIENTIRowChanged;
            
            public event CLIENTIRowChangeEventHandler CLIENTIRowDeleting;
            
            public event CLIENTIRowChangeEventHandler CLIENTIRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCLIENTIRow(CLIENTIRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIRow AddCLIENTIRow(string COD_CLIENT, string NUME, string ADRESA, string TELEFON, string FAX, string EMAIL, bool FLAG_DEL) {
                CLIENTIRow rowCLIENTIRow = ((CLIENTIRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        COD_CLIENT,
                        NUME,
                        ADRESA,
                        TELEFON,
                        FAX,
                        EMAIL,
                        FLAG_DEL};
                rowCLIENTIRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCLIENTIRow);
                return rowCLIENTIRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIRow FindByID_CLIENT(int ID_CLIENT) {
                return ((CLIENTIRow)(this.Rows.Find(new object[] {
                            ID_CLIENT})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CLIENTIDataTable cln = ((CLIENTIDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CLIENTIDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_CLIENT = base.Columns["ID_CLIENT"];
                this.columnCOD_CLIENT = base.Columns["COD_CLIENT"];
                this.columnNUME = base.Columns["NUME"];
                this.columnADRESA = base.Columns["ADRESA"];
                this.columnTELEFON = base.Columns["TELEFON"];
                this.columnFAX = base.Columns["FAX"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnFLAG_DEL = base.Columns["FLAG_DEL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_CLIENT = new global::System.Data.DataColumn("ID_CLIENT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_CLIENT);
                this.columnCOD_CLIENT = new global::System.Data.DataColumn("COD_CLIENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_CLIENT);
                this.columnNUME = new global::System.Data.DataColumn("NUME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUME);
                this.columnADRESA = new global::System.Data.DataColumn("ADRESA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADRESA);
                this.columnTELEFON = new global::System.Data.DataColumn("TELEFON", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTELEFON);
                this.columnFAX = new global::System.Data.DataColumn("FAX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAX);
                this.columnEMAIL = new global::System.Data.DataColumn("EMAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnFLAG_DEL = new global::System.Data.DataColumn("FLAG_DEL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAG_DEL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_CLIENT}, true));
                this.columnID_CLIENT.AutoIncrement = true;
                this.columnID_CLIENT.AutoIncrementSeed = -1;
                this.columnID_CLIENT.AutoIncrementStep = -1;
                this.columnID_CLIENT.AllowDBNull = false;
                this.columnID_CLIENT.ReadOnly = true;
                this.columnID_CLIENT.Unique = true;
                this.columnCOD_CLIENT.AllowDBNull = false;
                this.columnCOD_CLIENT.MaxLength = 1000;
                this.columnNUME.AllowDBNull = false;
                this.columnNUME.MaxLength = 1000;
                this.columnADRESA.AllowDBNull = false;
                this.columnADRESA.MaxLength = 1000;
                this.columnTELEFON.MaxLength = 1000;
                this.columnFAX.MaxLength = 100;
                this.columnEMAIL.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIRow NewCLIENTIRow() {
                return ((CLIENTIRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CLIENTIRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CLIENTIRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CLIENTIRowChanged != null)) {
                    this.CLIENTIRowChanged(this, new CLIENTIRowChangeEvent(((CLIENTIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CLIENTIRowChanging != null)) {
                    this.CLIENTIRowChanging(this, new CLIENTIRowChangeEvent(((CLIENTIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CLIENTIRowDeleted != null)) {
                    this.CLIENTIRowDeleted(this, new CLIENTIRowChangeEvent(((CLIENTIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CLIENTIRowDeleting != null)) {
                    this.CLIENTIRowDeleting(this, new CLIENTIRowChangeEvent(((CLIENTIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCLIENTIRow(CLIENTIRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EMC_COMENZIDataSet ds = new EMC_COMENZIDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CLIENTIDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PRODUSEDataTable : global::System.Data.TypedTableBase<PRODUSERow> {
            
            private global::System.Data.DataColumn columnID_PRODUS;
            
            private global::System.Data.DataColumn columnCOD_PRODUS;
            
            private global::System.Data.DataColumn columnDENUMIRE;
            
            private global::System.Data.DataColumn columnUNITATE_MASURA;
            
            private global::System.Data.DataColumn columnPRET;
            
            private global::System.Data.DataColumn columnCOD_BARE;
            
            private global::System.Data.DataColumn columnFLAG_DEL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSEDataTable() {
                this.TableName = "PRODUSE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRODUSEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PRODUSEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_PRODUSColumn {
                get {
                    return this.columnID_PRODUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_PRODUSColumn {
                get {
                    return this.columnCOD_PRODUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DENUMIREColumn {
                get {
                    return this.columnDENUMIRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITATE_MASURAColumn {
                get {
                    return this.columnUNITATE_MASURA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRETColumn {
                get {
                    return this.columnPRET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_BAREColumn {
                get {
                    return this.columnCOD_BARE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLAG_DELColumn {
                get {
                    return this.columnFLAG_DEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSERow this[int index] {
                get {
                    return ((PRODUSERow)(this.Rows[index]));
                }
            }
            
            public event PRODUSERowChangeEventHandler PRODUSERowChanging;
            
            public event PRODUSERowChangeEventHandler PRODUSERowChanged;
            
            public event PRODUSERowChangeEventHandler PRODUSERowDeleting;
            
            public event PRODUSERowChangeEventHandler PRODUSERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPRODUSERow(PRODUSERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSERow AddPRODUSERow(string COD_PRODUS, string DENUMIRE, string UNITATE_MASURA, double PRET, string COD_BARE, bool FLAG_DEL) {
                PRODUSERow rowPRODUSERow = ((PRODUSERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        COD_PRODUS,
                        DENUMIRE,
                        UNITATE_MASURA,
                        PRET,
                        COD_BARE,
                        FLAG_DEL};
                rowPRODUSERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPRODUSERow);
                return rowPRODUSERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSERow FindByID_PRODUS(int ID_PRODUS) {
                return ((PRODUSERow)(this.Rows.Find(new object[] {
                            ID_PRODUS})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PRODUSEDataTable cln = ((PRODUSEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PRODUSEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_PRODUS = base.Columns["ID_PRODUS"];
                this.columnCOD_PRODUS = base.Columns["COD_PRODUS"];
                this.columnDENUMIRE = base.Columns["DENUMIRE"];
                this.columnUNITATE_MASURA = base.Columns["UNITATE_MASURA"];
                this.columnPRET = base.Columns["PRET"];
                this.columnCOD_BARE = base.Columns["COD_BARE"];
                this.columnFLAG_DEL = base.Columns["FLAG_DEL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_PRODUS = new global::System.Data.DataColumn("ID_PRODUS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PRODUS);
                this.columnCOD_PRODUS = new global::System.Data.DataColumn("COD_PRODUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_PRODUS);
                this.columnDENUMIRE = new global::System.Data.DataColumn("DENUMIRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDENUMIRE);
                this.columnUNITATE_MASURA = new global::System.Data.DataColumn("UNITATE_MASURA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNITATE_MASURA);
                this.columnPRET = new global::System.Data.DataColumn("PRET", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRET);
                this.columnCOD_BARE = new global::System.Data.DataColumn("COD_BARE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_BARE);
                this.columnFLAG_DEL = new global::System.Data.DataColumn("FLAG_DEL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAG_DEL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_PRODUS}, true));
                this.columnID_PRODUS.AutoIncrement = true;
                this.columnID_PRODUS.AutoIncrementSeed = -1;
                this.columnID_PRODUS.AutoIncrementStep = -1;
                this.columnID_PRODUS.AllowDBNull = false;
                this.columnID_PRODUS.ReadOnly = true;
                this.columnID_PRODUS.Unique = true;
                this.columnCOD_PRODUS.AllowDBNull = false;
                this.columnCOD_PRODUS.MaxLength = 100;
                this.columnDENUMIRE.AllowDBNull = false;
                this.columnDENUMIRE.MaxLength = 1000;
                this.columnUNITATE_MASURA.AllowDBNull = false;
                this.columnUNITATE_MASURA.MaxLength = 100;
                this.columnPRET.AllowDBNull = false;
                this.columnCOD_BARE.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSERow NewPRODUSERow() {
                return ((PRODUSERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PRODUSERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PRODUSERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PRODUSERowChanged != null)) {
                    this.PRODUSERowChanged(this, new PRODUSERowChangeEvent(((PRODUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PRODUSERowChanging != null)) {
                    this.PRODUSERowChanging(this, new PRODUSERowChangeEvent(((PRODUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PRODUSERowDeleted != null)) {
                    this.PRODUSERowDeleted(this, new PRODUSERowChangeEvent(((PRODUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PRODUSERowDeleting != null)) {
                    this.PRODUSERowDeleting(this, new PRODUSERowChangeEvent(((PRODUSERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePRODUSERow(PRODUSERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EMC_COMENZIDataSet ds = new EMC_COMENZIDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PRODUSEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMENZI_DETALIUDataTable : global::System.Data.TypedTableBase<COMENZI_DETALIURow> {
            
            private global::System.Data.DataColumn columnID_DETALIU_COMANDA;
            
            private global::System.Data.DataColumn columnID_COMANDA;
            
            private global::System.Data.DataColumn columnID_PRODUS;
            
            private global::System.Data.DataColumn columnCANTITATE;
            
            private global::System.Data.DataColumn columnFLAG_DEL;
            
            private global::System.Data.DataColumn columnCOD_PRODUS;
            
            private global::System.Data.DataColumn columnDENUMIRE;
            
            private global::System.Data.DataColumn columnUNITATE_MASURA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIUDataTable() {
                this.TableName = "COMENZI_DETALIU";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMENZI_DETALIUDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMENZI_DETALIUDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_DETALIU_COMANDAColumn {
                get {
                    return this.columnID_DETALIU_COMANDA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_COMANDAColumn {
                get {
                    return this.columnID_COMANDA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_PRODUSColumn {
                get {
                    return this.columnID_PRODUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CANTITATEColumn {
                get {
                    return this.columnCANTITATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLAG_DELColumn {
                get {
                    return this.columnFLAG_DEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_PRODUSColumn {
                get {
                    return this.columnCOD_PRODUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DENUMIREColumn {
                get {
                    return this.columnDENUMIRE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITATE_MASURAColumn {
                get {
                    return this.columnUNITATE_MASURA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIURow this[int index] {
                get {
                    return ((COMENZI_DETALIURow)(this.Rows[index]));
                }
            }
            
            public event COMENZI_DETALIURowChangeEventHandler COMENZI_DETALIURowChanging;
            
            public event COMENZI_DETALIURowChangeEventHandler COMENZI_DETALIURowChanged;
            
            public event COMENZI_DETALIURowChangeEventHandler COMENZI_DETALIURowDeleting;
            
            public event COMENZI_DETALIURowChangeEventHandler COMENZI_DETALIURowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMENZI_DETALIURow(COMENZI_DETALIURow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIURow AddCOMENZI_DETALIURow(int ID_COMANDA, PRODUSERow parentPRODUSERowByFK_COMENZI_DETALIU_PRODUSE, double CANTITATE, bool FLAG_DEL, string COD_PRODUS, string DENUMIRE, string UNITATE_MASURA) {
                COMENZI_DETALIURow rowCOMENZI_DETALIURow = ((COMENZI_DETALIURow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ID_COMANDA,
                        null,
                        CANTITATE,
                        FLAG_DEL,
                        COD_PRODUS,
                        DENUMIRE,
                        UNITATE_MASURA};
                if ((parentPRODUSERowByFK_COMENZI_DETALIU_PRODUSE != null)) {
                    columnValuesArray[2] = parentPRODUSERowByFK_COMENZI_DETALIU_PRODUSE[0];
                }
                rowCOMENZI_DETALIURow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCOMENZI_DETALIURow);
                return rowCOMENZI_DETALIURow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIURow FindByID_DETALIU_COMANDA(int ID_DETALIU_COMANDA) {
                return ((COMENZI_DETALIURow)(this.Rows.Find(new object[] {
                            ID_DETALIU_COMANDA})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                COMENZI_DETALIUDataTable cln = ((COMENZI_DETALIUDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new COMENZI_DETALIUDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_DETALIU_COMANDA = base.Columns["ID_DETALIU_COMANDA"];
                this.columnID_COMANDA = base.Columns["ID_COMANDA"];
                this.columnID_PRODUS = base.Columns["ID_PRODUS"];
                this.columnCANTITATE = base.Columns["CANTITATE"];
                this.columnFLAG_DEL = base.Columns["FLAG_DEL"];
                this.columnCOD_PRODUS = base.Columns["COD_PRODUS"];
                this.columnDENUMIRE = base.Columns["DENUMIRE"];
                this.columnUNITATE_MASURA = base.Columns["UNITATE_MASURA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_DETALIU_COMANDA = new global::System.Data.DataColumn("ID_DETALIU_COMANDA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DETALIU_COMANDA);
                this.columnID_COMANDA = new global::System.Data.DataColumn("ID_COMANDA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_COMANDA);
                this.columnID_PRODUS = new global::System.Data.DataColumn("ID_PRODUS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PRODUS);
                this.columnCANTITATE = new global::System.Data.DataColumn("CANTITATE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCANTITATE);
                this.columnFLAG_DEL = new global::System.Data.DataColumn("FLAG_DEL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAG_DEL);
                this.columnCOD_PRODUS = new global::System.Data.DataColumn("COD_PRODUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_PRODUS);
                this.columnDENUMIRE = new global::System.Data.DataColumn("DENUMIRE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDENUMIRE);
                this.columnUNITATE_MASURA = new global::System.Data.DataColumn("UNITATE_MASURA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNITATE_MASURA);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_DETALIU_COMANDA}, true));
                this.columnID_DETALIU_COMANDA.AutoIncrement = true;
                this.columnID_DETALIU_COMANDA.AutoIncrementSeed = -1;
                this.columnID_DETALIU_COMANDA.AutoIncrementStep = -1;
                this.columnID_DETALIU_COMANDA.AllowDBNull = false;
                this.columnID_DETALIU_COMANDA.ReadOnly = true;
                this.columnID_DETALIU_COMANDA.Unique = true;
                this.columnID_COMANDA.AllowDBNull = false;
                this.columnID_PRODUS.AllowDBNull = false;
                this.columnCANTITATE.AllowDBNull = false;
                this.columnCOD_PRODUS.AllowDBNull = false;
                this.columnCOD_PRODUS.MaxLength = 100;
                this.columnDENUMIRE.AllowDBNull = false;
                this.columnDENUMIRE.MaxLength = 1000;
                this.columnUNITATE_MASURA.AllowDBNull = false;
                this.columnUNITATE_MASURA.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIURow NewCOMENZI_DETALIURow() {
                return ((COMENZI_DETALIURow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new COMENZI_DETALIURow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(COMENZI_DETALIURow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMENZI_DETALIURowChanged != null)) {
                    this.COMENZI_DETALIURowChanged(this, new COMENZI_DETALIURowChangeEvent(((COMENZI_DETALIURow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMENZI_DETALIURowChanging != null)) {
                    this.COMENZI_DETALIURowChanging(this, new COMENZI_DETALIURowChangeEvent(((COMENZI_DETALIURow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMENZI_DETALIURowDeleted != null)) {
                    this.COMENZI_DETALIURowDeleted(this, new COMENZI_DETALIURowChangeEvent(((COMENZI_DETALIURow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMENZI_DETALIURowDeleting != null)) {
                    this.COMENZI_DETALIURowDeleting(this, new COMENZI_DETALIURowChangeEvent(((COMENZI_DETALIURow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMENZI_DETALIURow(COMENZI_DETALIURow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EMC_COMENZIDataSet ds = new EMC_COMENZIDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMENZI_DETALIUDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMENZIDataTable : global::System.Data.TypedTableBase<COMENZIRow> {
            
            private global::System.Data.DataColumn columnID_COMANDA;
            
            private global::System.Data.DataColumn columnID_CLIENT;
            
            private global::System.Data.DataColumn columnDATA_COMANDA;
            
            private global::System.Data.DataColumn columnCOD_CLIENT;
            
            private global::System.Data.DataColumn columnNUME;
            
            private global::System.Data.DataColumn columnFLAG_DEL;
            
            private global::System.Data.DataColumn columnDATA_LIVRARE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIDataTable() {
                this.TableName = "COMENZI";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMENZIDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMENZIDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_COMANDAColumn {
                get {
                    return this.columnID_COMANDA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_CLIENTColumn {
                get {
                    return this.columnID_CLIENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATA_COMANDAColumn {
                get {
                    return this.columnDATA_COMANDA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COD_CLIENTColumn {
                get {
                    return this.columnCOD_CLIENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMEColumn {
                get {
                    return this.columnNUME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLAG_DELColumn {
                get {
                    return this.columnFLAG_DEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATA_LIVRAREColumn {
                get {
                    return this.columnDATA_LIVRARE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIRow this[int index] {
                get {
                    return ((COMENZIRow)(this.Rows[index]));
                }
            }
            
            public event COMENZIRowChangeEventHandler COMENZIRowChanging;
            
            public event COMENZIRowChangeEventHandler COMENZIRowChanged;
            
            public event COMENZIRowChangeEventHandler COMENZIRowDeleting;
            
            public event COMENZIRowChangeEventHandler COMENZIRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMENZIRow(COMENZIRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIRow AddCOMENZIRow(CLIENTIRow parentCLIENTIRowByFK_COMENZI_CLIENTI, System.DateTime DATA_COMANDA, string COD_CLIENT, string NUME, bool FLAG_DEL, System.DateTime DATA_LIVRARE) {
                COMENZIRow rowCOMENZIRow = ((COMENZIRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DATA_COMANDA,
                        COD_CLIENT,
                        NUME,
                        FLAG_DEL,
                        DATA_LIVRARE};
                if ((parentCLIENTIRowByFK_COMENZI_CLIENTI != null)) {
                    columnValuesArray[1] = parentCLIENTIRowByFK_COMENZI_CLIENTI[0];
                }
                rowCOMENZIRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCOMENZIRow);
                return rowCOMENZIRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIRow FindByID_COMANDA(int ID_COMANDA) {
                return ((COMENZIRow)(this.Rows.Find(new object[] {
                            ID_COMANDA})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                COMENZIDataTable cln = ((COMENZIDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new COMENZIDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_COMANDA = base.Columns["ID_COMANDA"];
                this.columnID_CLIENT = base.Columns["ID_CLIENT"];
                this.columnDATA_COMANDA = base.Columns["DATA_COMANDA"];
                this.columnCOD_CLIENT = base.Columns["COD_CLIENT"];
                this.columnNUME = base.Columns["NUME"];
                this.columnFLAG_DEL = base.Columns["FLAG_DEL"];
                this.columnDATA_LIVRARE = base.Columns["DATA_LIVRARE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_COMANDA = new global::System.Data.DataColumn("ID_COMANDA", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_COMANDA);
                this.columnID_CLIENT = new global::System.Data.DataColumn("ID_CLIENT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_CLIENT);
                this.columnDATA_COMANDA = new global::System.Data.DataColumn("DATA_COMANDA", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATA_COMANDA);
                this.columnCOD_CLIENT = new global::System.Data.DataColumn("COD_CLIENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOD_CLIENT);
                this.columnNUME = new global::System.Data.DataColumn("NUME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUME);
                this.columnFLAG_DEL = new global::System.Data.DataColumn("FLAG_DEL", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAG_DEL);
                this.columnDATA_LIVRARE = new global::System.Data.DataColumn("DATA_LIVRARE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATA_LIVRARE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_COMANDA}, true));
                this.columnID_COMANDA.AutoIncrement = true;
                this.columnID_COMANDA.AutoIncrementSeed = -1;
                this.columnID_COMANDA.AutoIncrementStep = -1;
                this.columnID_COMANDA.AllowDBNull = false;
                this.columnID_COMANDA.ReadOnly = true;
                this.columnID_COMANDA.Unique = true;
                this.columnID_CLIENT.AllowDBNull = false;
                this.columnDATA_COMANDA.AllowDBNull = false;
                this.columnCOD_CLIENT.AllowDBNull = false;
                this.columnCOD_CLIENT.MaxLength = 1000;
                this.columnNUME.AllowDBNull = false;
                this.columnNUME.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIRow NewCOMENZIRow() {
                return ((COMENZIRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new COMENZIRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(COMENZIRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMENZIRowChanged != null)) {
                    this.COMENZIRowChanged(this, new COMENZIRowChangeEvent(((COMENZIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMENZIRowChanging != null)) {
                    this.COMENZIRowChanging(this, new COMENZIRowChangeEvent(((COMENZIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMENZIRowDeleted != null)) {
                    this.COMENZIRowDeleted(this, new COMENZIRowChangeEvent(((COMENZIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMENZIRowDeleting != null)) {
                    this.COMENZIRowDeleting(this, new COMENZIRowChangeEvent(((COMENZIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMENZIRow(COMENZIRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EMC_COMENZIDataSet ds = new EMC_COMENZIDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMENZIDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CLIENTIRow : global::System.Data.DataRow {
            
            private CLIENTIDataTable tableCLIENTI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CLIENTIRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCLIENTI = ((CLIENTIDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_CLIENT {
                get {
                    return ((int)(this[this.tableCLIENTI.ID_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENTI.ID_CLIENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_CLIENT {
                get {
                    return ((string)(this[this.tableCLIENTI.COD_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENTI.COD_CLIENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUME {
                get {
                    return ((string)(this[this.tableCLIENTI.NUMEColumn]));
                }
                set {
                    this[this.tableCLIENTI.NUMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADRESA {
                get {
                    return ((string)(this[this.tableCLIENTI.ADRESAColumn]));
                }
                set {
                    this[this.tableCLIENTI.ADRESAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TELEFON {
                get {
                    try {
                        return ((string)(this[this.tableCLIENTI.TELEFONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TELEFON\' in table \'CLIENTI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENTI.TELEFONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FAX {
                get {
                    try {
                        return ((string)(this[this.tableCLIENTI.FAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FAX\' in table \'CLIENTI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENTI.FAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tableCLIENTI.EMAILColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMAIL\' in table \'CLIENTI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENTI.EMAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FLAG_DEL {
                get {
                    try {
                        return ((bool)(this[this.tableCLIENTI.FLAG_DELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAG_DEL\' in table \'CLIENTI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENTI.FLAG_DELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTELEFONNull() {
                return this.IsNull(this.tableCLIENTI.TELEFONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTELEFONNull() {
                this[this.tableCLIENTI.TELEFONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFAXNull() {
                return this.IsNull(this.tableCLIENTI.FAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFAXNull() {
                this[this.tableCLIENTI.FAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.tableCLIENTI.EMAILColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.tableCLIENTI.EMAILColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLAG_DELNull() {
                return this.IsNull(this.tableCLIENTI.FLAG_DELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLAG_DELNull() {
                this[this.tableCLIENTI.FLAG_DELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIRow[] GetCOMENZIRows() {
                if ((this.Table.ChildRelations["FK_COMENZI_CLIENTI"] == null)) {
                    return new COMENZIRow[0];
                }
                else {
                    return ((COMENZIRow[])(base.GetChildRows(this.Table.ChildRelations["FK_COMENZI_CLIENTI"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PRODUSERow : global::System.Data.DataRow {
            
            private PRODUSEDataTable tablePRODUSE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PRODUSERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePRODUSE = ((PRODUSEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_PRODUS {
                get {
                    return ((int)(this[this.tablePRODUSE.ID_PRODUSColumn]));
                }
                set {
                    this[this.tablePRODUSE.ID_PRODUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_PRODUS {
                get {
                    return ((string)(this[this.tablePRODUSE.COD_PRODUSColumn]));
                }
                set {
                    this[this.tablePRODUSE.COD_PRODUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DENUMIRE {
                get {
                    return ((string)(this[this.tablePRODUSE.DENUMIREColumn]));
                }
                set {
                    this[this.tablePRODUSE.DENUMIREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNITATE_MASURA {
                get {
                    return ((string)(this[this.tablePRODUSE.UNITATE_MASURAColumn]));
                }
                set {
                    this[this.tablePRODUSE.UNITATE_MASURAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PRET {
                get {
                    return ((double)(this[this.tablePRODUSE.PRETColumn]));
                }
                set {
                    this[this.tablePRODUSE.PRETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_BARE {
                get {
                    try {
                        return ((string)(this[this.tablePRODUSE.COD_BAREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COD_BARE\' in table \'PRODUSE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePRODUSE.COD_BAREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FLAG_DEL {
                get {
                    try {
                        return ((bool)(this[this.tablePRODUSE.FLAG_DELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAG_DEL\' in table \'PRODUSE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePRODUSE.FLAG_DELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOD_BARENull() {
                return this.IsNull(this.tablePRODUSE.COD_BAREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOD_BARENull() {
                this[this.tablePRODUSE.COD_BAREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLAG_DELNull() {
                return this.IsNull(this.tablePRODUSE.FLAG_DELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLAG_DELNull() {
                this[this.tablePRODUSE.FLAG_DELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIURow[] GetCOMENZI_DETALIURows() {
                if ((this.Table.ChildRelations["FK_COMENZI_DETALIU_PRODUSE"] == null)) {
                    return new COMENZI_DETALIURow[0];
                }
                else {
                    return ((COMENZI_DETALIURow[])(base.GetChildRows(this.Table.ChildRelations["FK_COMENZI_DETALIU_PRODUSE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMENZI_DETALIURow : global::System.Data.DataRow {
            
            private COMENZI_DETALIUDataTable tableCOMENZI_DETALIU;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMENZI_DETALIURow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMENZI_DETALIU = ((COMENZI_DETALIUDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_DETALIU_COMANDA {
                get {
                    return ((int)(this[this.tableCOMENZI_DETALIU.ID_DETALIU_COMANDAColumn]));
                }
                set {
                    this[this.tableCOMENZI_DETALIU.ID_DETALIU_COMANDAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_COMANDA {
                get {
                    return ((int)(this[this.tableCOMENZI_DETALIU.ID_COMANDAColumn]));
                }
                set {
                    this[this.tableCOMENZI_DETALIU.ID_COMANDAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_PRODUS {
                get {
                    return ((int)(this[this.tableCOMENZI_DETALIU.ID_PRODUSColumn]));
                }
                set {
                    this[this.tableCOMENZI_DETALIU.ID_PRODUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CANTITATE {
                get {
                    return ((double)(this[this.tableCOMENZI_DETALIU.CANTITATEColumn]));
                }
                set {
                    this[this.tableCOMENZI_DETALIU.CANTITATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FLAG_DEL {
                get {
                    try {
                        return ((bool)(this[this.tableCOMENZI_DETALIU.FLAG_DELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAG_DEL\' in table \'COMENZI_DETALIU\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMENZI_DETALIU.FLAG_DELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_PRODUS {
                get {
                    return ((string)(this[this.tableCOMENZI_DETALIU.COD_PRODUSColumn]));
                }
                set {
                    this[this.tableCOMENZI_DETALIU.COD_PRODUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DENUMIRE {
                get {
                    return ((string)(this[this.tableCOMENZI_DETALIU.DENUMIREColumn]));
                }
                set {
                    this[this.tableCOMENZI_DETALIU.DENUMIREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNITATE_MASURA {
                get {
                    return ((string)(this[this.tableCOMENZI_DETALIU.UNITATE_MASURAColumn]));
                }
                set {
                    this[this.tableCOMENZI_DETALIU.UNITATE_MASURAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSERow PRODUSERow {
                get {
                    return ((PRODUSERow)(this.GetParentRow(this.Table.ParentRelations["FK_COMENZI_DETALIU_PRODUSE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COMENZI_DETALIU_PRODUSE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLAG_DELNull() {
                return this.IsNull(this.tableCOMENZI_DETALIU.FLAG_DELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLAG_DELNull() {
                this[this.tableCOMENZI_DETALIU.FLAG_DELColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMENZIRow : global::System.Data.DataRow {
            
            private COMENZIDataTable tableCOMENZI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMENZIRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMENZI = ((COMENZIDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_COMANDA {
                get {
                    return ((int)(this[this.tableCOMENZI.ID_COMANDAColumn]));
                }
                set {
                    this[this.tableCOMENZI.ID_COMANDAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_CLIENT {
                get {
                    return ((int)(this[this.tableCOMENZI.ID_CLIENTColumn]));
                }
                set {
                    this[this.tableCOMENZI.ID_CLIENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATA_COMANDA {
                get {
                    return ((global::System.DateTime)(this[this.tableCOMENZI.DATA_COMANDAColumn]));
                }
                set {
                    this[this.tableCOMENZI.DATA_COMANDAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COD_CLIENT {
                get {
                    return ((string)(this[this.tableCOMENZI.COD_CLIENTColumn]));
                }
                set {
                    this[this.tableCOMENZI.COD_CLIENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUME {
                get {
                    return ((string)(this[this.tableCOMENZI.NUMEColumn]));
                }
                set {
                    this[this.tableCOMENZI.NUMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FLAG_DEL {
                get {
                    try {
                        return ((bool)(this[this.tableCOMENZI.FLAG_DELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAG_DEL\' in table \'COMENZI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMENZI.FLAG_DELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATA_LIVRARE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCOMENZI.DATA_LIVRAREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATA_LIVRARE\' in table \'COMENZI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMENZI.DATA_LIVRAREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIRow CLIENTIRow {
                get {
                    return ((CLIENTIRow)(this.GetParentRow(this.Table.ParentRelations["FK_COMENZI_CLIENTI"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COMENZI_CLIENTI"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLAG_DELNull() {
                return this.IsNull(this.tableCOMENZI.FLAG_DELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLAG_DELNull() {
                this[this.tableCOMENZI.FLAG_DELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATA_LIVRARENull() {
                return this.IsNull(this.tableCOMENZI.DATA_LIVRAREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATA_LIVRARENull() {
                this[this.tableCOMENZI.DATA_LIVRAREColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CLIENTIRowChangeEvent : global::System.EventArgs {
            
            private CLIENTIRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIRowChangeEvent(CLIENTIRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTIRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PRODUSERowChangeEvent : global::System.EventArgs {
            
            private PRODUSERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSERowChangeEvent(PRODUSERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PRODUSERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMENZI_DETALIURowChangeEvent : global::System.EventArgs {
            
            private COMENZI_DETALIURow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIURowChangeEvent(COMENZI_DETALIURow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZI_DETALIURow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMENZIRowChangeEvent : global::System.EventArgs {
            
            private COMENZIRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIRowChangeEvent(COMENZIRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMENZIRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace EMC_COMENZI.EMC_COMENZIDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CLIENTITableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CLIENTITableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CLIENTI";
            tableMapping.ColumnMappings.Add("ID_CLIENT", "ID_CLIENT");
            tableMapping.ColumnMappings.Add("COD_CLIENT", "COD_CLIENT");
            tableMapping.ColumnMappings.Add("NUME", "NUME");
            tableMapping.ColumnMappings.Add("ADRESA", "ADRESA");
            tableMapping.ColumnMappings.Add("TELEFON", "TELEFON");
            tableMapping.ColumnMappings.Add("FAX", "FAX");
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL");
            tableMapping.ColumnMappings.Add("FLAG_DEL", "FLAG_DEL");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EMC_COMENZI.Properties.Settings.Default.EMC_COMENZIConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.sp_Clienti_Select";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ERC", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.InputOutput, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MESSAGE", global::System.Data.SqlDbType.NVarChar, 4000, global::System.Data.ParameterDirection.InputOutput, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COD_CLIENT", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NUME", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADRESA", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TELEFON", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EMC_COMENZIDataSet.CLIENTIDataTable dataTable, ref global::System.Nullable<int> ERC, ref string MESSAGE, string COD_CLIENT, string NUME, string ADRESA, string TELEFON) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((COD_CLIENT == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(COD_CLIENT));
            }
            if ((NUME == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(NUME));
            }
            if ((ADRESA == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(ADRESA));
            }
            if ((TELEFON == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(TELEFON));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EMC_COMENZIDataSet.CLIENTIDataTable GetData(ref global::System.Nullable<int> ERC, ref string MESSAGE, string COD_CLIENT, string NUME, string ADRESA, string TELEFON) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((COD_CLIENT == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(COD_CLIENT));
            }
            if ((NUME == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(NUME));
            }
            if ((ADRESA == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(ADRESA));
            }
            if ((TELEFON == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(TELEFON));
            }
            EMC_COMENZIDataSet.CLIENTIDataTable dataTable = new EMC_COMENZIDataSet.CLIENTIDataTable();
            this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PRODUSETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PRODUSETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PRODUSE";
            tableMapping.ColumnMappings.Add("ID_PRODUS", "ID_PRODUS");
            tableMapping.ColumnMappings.Add("COD_PRODUS", "COD_PRODUS");
            tableMapping.ColumnMappings.Add("DENUMIRE", "DENUMIRE");
            tableMapping.ColumnMappings.Add("UNITATE_MASURA", "UNITATE_MASURA");
            tableMapping.ColumnMappings.Add("PRET", "PRET");
            tableMapping.ColumnMappings.Add("COD_BARE", "COD_BARE");
            tableMapping.ColumnMappings.Add("FLAG_DEL", "FLAG_DEL");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EMC_COMENZI.Properties.Settings.Default.EMC_COMENZIConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.sp_Produse_Select";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ERC", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.InputOutput, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MESSAGE", global::System.Data.SqlDbType.NVarChar, 4000, global::System.Data.ParameterDirection.InputOutput, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COD_PRODUS", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DENUMIRE", global::System.Data.SqlDbType.VarChar, 1000, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UNITATE_MASURA", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PRET", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 53, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COD_BARE", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EMC_COMENZIDataSet.PRODUSEDataTable dataTable, ref global::System.Nullable<int> ERC, ref string MESSAGE, string COD_PRODUS, string DENUMIRE, string UNITATE_MASURA, global::System.Nullable<double> PRET, string COD_BARE) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((COD_PRODUS == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(COD_PRODUS));
            }
            if ((DENUMIRE == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(DENUMIRE));
            }
            if ((UNITATE_MASURA == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(UNITATE_MASURA));
            }
            if ((PRET.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((double)(PRET.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((COD_BARE == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(COD_BARE));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EMC_COMENZIDataSet.PRODUSEDataTable GetData(ref global::System.Nullable<int> ERC, ref string MESSAGE, string COD_PRODUS, string DENUMIRE, string UNITATE_MASURA, global::System.Nullable<double> PRET, string COD_BARE) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((COD_PRODUS == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(COD_PRODUS));
            }
            if ((DENUMIRE == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(DENUMIRE));
            }
            if ((UNITATE_MASURA == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(UNITATE_MASURA));
            }
            if ((PRET.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((double)(PRET.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((COD_BARE == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(COD_BARE));
            }
            EMC_COMENZIDataSet.PRODUSEDataTable dataTable = new EMC_COMENZIDataSet.PRODUSEDataTable();
            this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMENZI_DETALIUTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMENZI_DETALIUTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMENZI_DETALIU";
            tableMapping.ColumnMappings.Add("ID_DETALIU_COMANDA", "ID_DETALIU_COMANDA");
            tableMapping.ColumnMappings.Add("ID_COMANDA", "ID_COMANDA");
            tableMapping.ColumnMappings.Add("ID_PRODUS", "ID_PRODUS");
            tableMapping.ColumnMappings.Add("CANTITATE", "CANTITATE");
            tableMapping.ColumnMappings.Add("FLAG_DEL", "FLAG_DEL");
            tableMapping.ColumnMappings.Add("COD_PRODUS", "COD_PRODUS");
            tableMapping.ColumnMappings.Add("DENUMIRE", "DENUMIRE");
            tableMapping.ColumnMappings.Add("UNITATE_MASURA", "UNITATE_MASURA");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EMC_COMENZI.Properties.Settings.Default.EMC_COMENZIConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.sp_ComenziDetaliu_Select";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ERC", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.InputOutput, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MESSAGE", global::System.Data.SqlDbType.NVarChar, 4000, global::System.Data.ParameterDirection.InputOutput, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_COMANDA", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EMC_COMENZIDataSet.COMENZI_DETALIUDataTable dataTable, ref global::System.Nullable<int> ERC, ref string MESSAGE, global::System.Nullable<long> ID_COMANDA) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((ID_COMANDA.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((long)(ID_COMANDA.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EMC_COMENZIDataSet.COMENZI_DETALIUDataTable GetData(ref global::System.Nullable<int> ERC, ref string MESSAGE, global::System.Nullable<long> ID_COMANDA) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((ID_COMANDA.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((long)(ID_COMANDA.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            EMC_COMENZIDataSet.COMENZI_DETALIUDataTable dataTable = new EMC_COMENZIDataSet.COMENZI_DETALIUDataTable();
            this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMENZITableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMENZITableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMENZI";
            tableMapping.ColumnMappings.Add("ID_COMANDA", "ID_COMANDA");
            tableMapping.ColumnMappings.Add("ID_CLIENT", "ID_CLIENT");
            tableMapping.ColumnMappings.Add("COD_CLIENT", "COD_CLIENT");
            tableMapping.ColumnMappings.Add("NUME", "NUME");
            tableMapping.ColumnMappings.Add("FLAG_DEL", "FLAG_DEL");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EMC_COMENZI.Properties.Settings.Default.EMC_COMENZIConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.sp_Comenzi_Select";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ERC", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.InputOutput, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MESSAGE", global::System.Data.SqlDbType.NVarChar, 4000, global::System.Data.ParameterDirection.InputOutput, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_CLIENT", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_PRODUS", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 19, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DATA_START", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DATA_STOP", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EMC_COMENZIDataSet.COMENZIDataTable dataTable, ref global::System.Nullable<int> ERC, ref string MESSAGE, global::System.Nullable<long> ID_CLIENT, global::System.Nullable<long> ID_PRODUS, global::System.Nullable<global::System.DateTime> DATA_START, global::System.Nullable<global::System.DateTime> DATA_STOP) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((ID_CLIENT.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((long)(ID_CLIENT.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ID_PRODUS.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((long)(ID_PRODUS.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((DATA_START.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((System.DateTime)(DATA_START.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((DATA_STOP.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(DATA_STOP.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EMC_COMENZIDataSet.COMENZIDataTable GetData(ref global::System.Nullable<int> ERC, ref string MESSAGE, global::System.Nullable<long> ID_CLIENT, global::System.Nullable<long> ID_PRODUS, global::System.Nullable<global::System.DateTime> DATA_START, global::System.Nullable<global::System.DateTime> DATA_STOP) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((ERC.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ERC.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MESSAGE == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(MESSAGE));
            }
            if ((ID_CLIENT.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((long)(ID_CLIENT.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ID_PRODUS.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((long)(ID_PRODUS.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((DATA_START.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((System.DateTime)(DATA_START.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((DATA_STOP.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(DATA_STOP.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            EMC_COMENZIDataSet.COMENZIDataTable dataTable = new EMC_COMENZIDataSet.COMENZIDataTable();
            this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[1].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[1].Value.GetType() == typeof(global::System.DBNull)))) {
                ERC = new global::System.Nullable<int>();
            }
            else {
                ERC = new global::System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[1].Value)));
            }
            if (((this.Adapter.SelectCommand.Parameters[2].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[2].Value.GetType() == typeof(global::System.DBNull)))) {
                MESSAGE = null;
            }
            else {
                MESSAGE = ((string)(this.Adapter.SelectCommand.Parameters[2].Value));
            }
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(EMC_COMENZIDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(EMC_COMENZIDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(EMC_COMENZIDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(EMC_COMENZIDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591